{"version":3,"sources":["components/NavBar/NavBarItem/index.tsx","constants/Algorithms.ts","constants/NavigationData.ts","components/NavBar/index.tsx","components/Shared/RunButton/index.tsx","components/Shared/NumberInput/index.tsx","components/Shared/RefreshDataButton/index.tsx","components/Shared/SpeedSlider/index.tsx","components/Shared/RunningAnimation/index.tsx","components/Shared/Svg/index.tsx","constants/Values.ts","components/Shared/Title/index.ts","components/Shared/MainContent/index.ts","components/Shared/SidePanel/index.ts","constants/DataType.ts","d3-helper/create.ts","constants/Color.ts","constants/Input.ts","d3-helper/Animation/QuickSort/index.ts","d3-helper/animation-helper.ts","config.ts","d3-helper/Animation/BubbleSort/index.ts","d3-helper/Animation/SelectionSort/index.ts","d3-helper/Animation/InsertionSort/index.ts","d3-helper/Animation/MergeSort/index.ts","d3-helper/Animation/BinarySearch/index.ts","d3-helper/Animation/DFS/index.ts","d3-helper/Animation/BFS/index.ts","components/Category/Sorting/index.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["Algorithms","Container","styled","div","UnorderedList","ul","ParentListItem","li","ChildListItem","show","css","index","Chevron","ChevronDown","ChildUnorderedList","NavBarItem","title","subTitles","setAlgo","useState","isHovered","setHovered","onMouseEnter","onMouseLeave","size","map","subtitle","key","onClick","toString","NavigationData","name","children","BUBBLE_SORT","SELECTION_SORT","INSERTION_SORT","MERGE_SORT","QUICK_SORT","BINARY_SEARCH","BREADTH_FIRST_SEARCH","DEPTH_FIRST_SEARCH","Title","span","NavBar","data","RunButton","button","Label","InputField","Input","input","NumberInput","forwardRef","ref","label","placeholder","type","RefreshDataButton","SliderInput","SpeedSlider","defaultValue","value","min","max","onChange","step","e","Svg","svg","RunningAnimation","svgRef","useRef","useEffect","current","select","append","attr","style","width","height","text","square","randomColor","Math","floor","random","animate","transition","ease","easeSinInOut","duration","on","MainContent","DataType","SidePanel","createMatrix","n","config","matrix","Array","counter","i","j","offsetHeight","offsetWidth","elements","selectAll","nodes","filter","includes","dataType","BAR","svgElements","createBars","dataset","createRandomArray","offset","remove","enter","d","length","bars","sort","a","b","parseInt","push","randomData","array","temporaryValue","randomIndex","currentIndex","shuffle","algo","scale","d3","domain","range","x","getHeight","bar","parseFloat","blink","element","repeat","Config","inputs","onRun","setIsRunning","currDuration","swaps","first","second","delay","this","temp","Number","MAX_VALUE","minIndex","console","log","curr","minBar","currIndex","currHeight","target","targetHeight","mergeSort","arr","mid","L","slice","R","left","right","mergeArr","old","result","concat","changeMap","Map","z","prev","set","from","k","v","barPos","substring","quickSort","pivot","pivotVal","barLeft","barRight","tempId","rightId","leftId","partition","selected","get","SELECT_1","selectedHeight","midBar","midHeight","prevLeft","prevRight","inputType","error","required","MATRIX","SELECT_2","sqrt","visited","targetCol","targetRow","r","found","dfs","node","col","row","pulse","clone","queue","shift","undefined","applyInputs","isRunning","setData","has","checkInputs","Sorting","speedPercent","setSpeedPercent","canExecute","setCanExecute","refresh","clear","inputFieldRef","textValue","property","generate","onRefresh","exponent","logScale","execute","event","App","selectedAlgorithm","setSelectedAlgorithm","run","Boolean","window","location","hostname","match","createRoot","document","getElementById","render","StrictMode","path","NotFoundContainer","NotFound","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.29f74b96.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { ChevronDown } from 'react-feather';\nimport Algorithms from '../../../constants/Algorithms';\n\ninterface NavBarItemProps {\n    title: string,\n    subTitles: Array<Algorithms>\n    setAlgo: Function\n}\n\nconst Container = styled.div`\n    color: white;\n    width:200px;\n    text-align: center;\n    border:1px solid rgba(122, 122, 122, 0.1);\n    font-size:12px;\n    &:hover {\n        background: rgba(0, 0, 0, 1);\n    }\n`;\n\nconst UnorderedList = styled.ul`\n    list-style: none;\n    padding: 10px;\n    margin: 0;\n`;\n\nconst ParentListItem = styled.li`\n    list-style: none;\n`;\n\ninterface ChildListItemProps {\n    show: boolean,\n    index: number\n}\n\nconst ChildListItem = styled.li<ChildListItemProps>`\n    position: absolute;\n    list-style: none;\n    display: none;\n    white-space: nowrap;\n\n    &:hover {\n        background:rgba(75, 75, 75, 1);\n        cursor: pointer;\n        font-weight: bold;\n    }\n    ${({ show }) => show &&\n    css`\n      display: inline;\n      background:#03191C;\n    `}\n\n  ${({ index }) =>\n    css`\n      width: 100%;\n      padding:12px;\n      top: ${index * 35 + 12}px;\n      left:-12px;\n    `}\n`;\n\nconst Chevron = styled(ChevronDown)`\n    position:relative;\n    top: 3px;\n    margin-left: 5px;\n`;\n\nconst ChildUnorderedList = styled.ul`\n    position: relative;\n`;\n\nconst NavBarItem : React.FC<NavBarItemProps> = ({ title ,subTitles, setAlgo}) => {\n    \n    const [isHovered, setHovered] = useState(false);\n\n    return (\n        <Container\n            onMouseEnter={() => setHovered(true)}\n            onMouseLeave={() => setHovered(false)}\n        >\n            <UnorderedList>\n                <ParentListItem>\n                    {title}\n                    <Chevron size={12}/>\n                    <ChildUnorderedList>\n                        {\n                            subTitles.map((subtitle : Algorithms, index) => \n                        <ChildListItem \n                            key={index}\n                            index={index}\n                            show={isHovered}\n                            onClick={() => setAlgo(subtitle)}\n                        >\n                            {subtitle.toString()}\n                        </ChildListItem>)\n                        }\n                    </ChildUnorderedList>\n                </ParentListItem>\n            </UnorderedList>\n        </Container>\n    );\n};\n\nexport default NavBarItem;","enum Algorithms {\n  BUBBLE_SORT = 'Bubble Sort',\n  SELECTION_SORT = 'Selection Sort',\n  INSERTION_SORT = 'Insertion Sort',\n  MERGE_SORT = 'Merge Sort',\n  QUICK_SORT = 'Quick Sort',\n  BINARY_SEARCH = 'Binary Search',\n  BREADTH_FIRST_SEARCH = 'BFS (Breadth First Search)',\n  DEPTH_FIRST_SEARCH = 'DFS (Depth First Search)',\n}\n\nexport default Algorithms;","import Algorithms from \"./Algorithms\";\n\nconst NavigationData = [\n    { name: 'Sorting', children: [\n        Algorithms.BUBBLE_SORT,\n        Algorithms.SELECTION_SORT,\n        Algorithms.INSERTION_SORT,\n        Algorithms.MERGE_SORT,\n        Algorithms.QUICK_SORT\n    ]},\n    { name: 'Search', children: [Algorithms.BINARY_SEARCH, Algorithms.BREADTH_FIRST_SEARCH, Algorithms.DEPTH_FIRST_SEARCH]}\n]\n\nexport default NavigationData;","import React from 'react';\nimport styled from 'styled-components';\nimport NavBarItem from './NavBarItem';\nimport NavigationData from '../../constants/NavigationData';\n\nconst Container = styled.div`\n    background-color: rgba(0,0,0, 0.2);\n    display: flex;\n    flex-direction: row;\n`;\n\nconst Title = styled.span`\n    color: white;\n    display:block;\n    padding: 10px;\n    font-weight: bold;\n    margin-left:30px;\n    letter-spacing: 1px;\n    text-transform: uppercase;\n`;\n\ntype NavBarProps = {\n    setAlgo: Function\n}\n\nconst NavBar : React.FC<NavBarProps> = ({ setAlgo }) => (\n  <Container>\n      <Title>Algorithms Visualization</Title>\n      {\n          NavigationData.map(data => <NavBarItem key={data.name} setAlgo={setAlgo} title={data.name} subTitles={data.children}/>)\n      }\n  </Container>\n);\n\nexport default NavBar;","import styled from \"styled-components\";\n\nconst RunButton = styled.button`\n    width: 120px;\n    height: 45px;\n    font-size: 11px;\n    text-transform: uppercase;\n    letter-spacing: 2.5px;\n    font-weight: 500;\n    color: white;\n    background-color: #2ac989;\n    border: none;\n    border-radius: 45px;\n    box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1);\n    transition: all 0.3s ease 0s;\n    cursor: pointer;\n    outline: none;\n    margin: 10px 0;\n\n    &:hover {\n        background-color: #205303;\n        box-shadow: 0px 15px 20px rgba(46, 229, 157, 0.1);\n        color: white;\n        transform: translateY(-7px);\n    }\n\n    &:active {\n        background-color: #205303;\n    }\n`;\n\nexport default RunButton;","import React, { forwardRef } from 'react';\nimport styled from \"styled-components\";\n\nconst Label = styled.span`\n    color: white;\n    letter-spacing: 1px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\n\nconst InputField = styled.div`\n    margin: 10px;\n    display: flex;\n    flex-direction: row;\n`;\n\nconst Input = styled.input`\n    width:100px;\n    border: 0;\n    outline: 0;\n    padding: 10px 0;\n    border-bottom: 2px solid white;\n    margin-left:10px;\n    box-shadow: none;\n    color: #111;\n    background:none;\n    color: white;\n    letter-spacing: 1px;\n    margin-top:5px;\n`;\n\ninterface NumberInputProps {\n    label: string,\n    ref: React.RefObject<HTMLInputElement>,\n    placeholder: string\n}\n\nconst NumberInput = forwardRef<HTMLInputElement, NumberInputProps>(\n    ({label, placeholder}, ref) => (\n        <InputField>\n            <Label>{label}</Label>\n            <Input ref={ref} placeholder={placeholder} type=\"number\"/>\n        </InputField>\n    )\n  );\n\nexport default NumberInput;","import styled from \"styled-components\";\n\nconst RefreshDataButton = styled.button`\n    width: 120px;\n    height: 45px;\n    font-size: 11px;\n    text-transform: uppercase;\n    letter-spacing: 2.5px;\n    font-weight: 500;\n    color: white;\n    background-color: #0079c4;\n    border: none;\n    border-radius: 45px;\n    box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1);\n    transition: all 0.3s ease 0s;\n    cursor: pointer;\n    outline: none;\n    margin: 10px 0;\n\n\n    &:hover {\n        background-color: #024f7f;\n        box-shadow: 0px 15px 20px rgba(46, 229, 157, 0.1);\n        color: white;\n        transform: translateY(-7px);\n    }\n\n    &:active {\n        background-color: #024f7f;\n    }\n`;\n\nexport default RefreshDataButton;","import React, { forwardRef } from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    display:flex;\n    flex-direction: column;\n    margin: 10px;\n    width:70%;\n`;\n\nconst Label = styled.span`\n    color: white;\n    letter-spacing: 1px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\n\nconst SliderInput = styled.input`\n    -webkit-appearance: none;\n    width: 100%;\n    height: 7px;\n    background: #d3d3d3;\n    outline: none;\n    opacity: 0.7;\n    -webkit-transition: .2s;\n    transition: opacity .2s;\n    margin:15px 0px;\n\n    &:hover {\n        opacity: 1;\n        box-shadow: 0px 0px 5px 5px rgba(46, 229, 157, 0.1);\n        cursor: pointer;\n    }\n\n    &::-webkit-slider-thumb {\n        -webkit-appearance: none;\n        appearance: none;\n        width: 25px;\n        height: 25px;\n        background: #4CAF50;\n        cursor: pointer;\n    }\n\n    &::-webkit-slider-thumb:active {\n        background: #027042;\n    }\n`;\n\ninterface SpeedSliderProps {\n    ref: React.RefObject<HTMLInputElement>,\n    defaultValue: number,\n    value: number,\n    type: string,\n    min: number,\n    max: number,\n    onChange: Function\n}\n\nconst SpeedSlider = forwardRef<HTMLInputElement, SpeedSliderProps>(\n    ({ defaultValue, value, type, min, max, onChange}, ref) => (\n        <Container>\n                <Label>Speed</Label>\n                <SliderInput \n                    defaultValue={defaultValue}\n                    ref={ref}\n                    type={type}\n                    min={min}\n                    max={max}\n                    step={1}\n                    onChange={e => onChange(e)}\n                />\n                <Label>{value}%</Label>\n        </Container>\n    )\n  );\n\n\nexport default SpeedSlider;","import React, { useRef, useEffect } from 'react';\nimport styled from'styled-components';\nimport { select } from 'd3-selection';\nimport { easeSinInOut } from 'd3';\n\nconst height = 50;\nconst width = 200;\n\nconst Container = styled.div`\n\n`;\n\nconst Svg = styled.svg`\n    height:${height}px;\n    width:${width}px;\n`;\n\nconst RunningAnimation: React.FC = () => {\n\n    const svgRef = useRef<SVGSVGElement>(null);\n\n    useEffect(() => {\n        const svg = svgRef.current;\n\n        select(svg)\n            .append('text')\n            .attr('fill', 'white')\n            .style('font-size', '24px')\n            .style('text-transform', 'uppercase')\n            .style('font-family', 'Roboto')\n            .style('letter-spacing', '1.5px')\n            .attr('x', (width/2) - 60)\n            .attr('y', height/2)\n            .text('Running')\n            \n\n        const square = select(svg)\n            .append('rect')\n            .attr('x', (width/2) - 60)\n            .attr('y', (height/2) + 10)\n            .attr('width', 20)\n            .attr('height', 2)\n            .attr('fill', 'white');\n        \n        const randomColor = () => '#' + Math.floor(Math.random()*16777215).toString(16);\n        \n        const animate = () => {\n            square\n            .transition()\n            .ease(easeSinInOut)\n            .attr('x', (width/2) + 35)\n            .attr('fill', randomColor())\n            .duration(1000)\n            .transition()\n            .ease(easeSinInOut)\n            .attr('x', (width/2) - 60)\n            .attr('fill', randomColor())\n            .duration(1000)\n            .on('end', animate)\n        };\n        \n        animate();\n        \n\n    });\n\n    return (\n        <Container>\n            <Svg ref={svgRef}></Svg>\n        </Container>\n    )\n\n}\n\nexport default RunningAnimation;","import styled from \"styled-components\"\n;import { SVG_HEIGHT, SVG_WIDTH } from \"../../../constants/Values\";\n\nconst Svg = styled.svg`\n    height:${SVG_HEIGHT}px;\n    width:${SVG_WIDTH}px;\n    background:rgba(255,255,255, 0.05);\n`;\n\nexport default Svg;","export const SVG_HEIGHT = 500;\nexport const SVG_WIDTH = 700;\nexport const DELAY = 0.5;","import styled from \"styled-components\";\n\nconst Title = styled.span`\n    display: block;\n    font-size:26px;\n    font-weight: 400;\n    color: white;\n    text-align: center;\n    text-transform: uppercase;\n    letter-spacing: 2px;\n    font-weight: 500;\n`;\n\nexport default Title;","import styled from \"styled-components\";\n\nconst MainContent = styled.div`\nmargin-top:20px;\ndisplay: flex;\nflex-direction: row;\n`;\n\nexport default MainContent;","import styled from \"styled-components\";\n\nconst SidePanel = styled.div`\n    text-align: center;\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    margin: 20px;\n    padding: 20px 50px;\n    background: rgba(0, 0, 0, 0.2);\n    align-items: center;\n    justify-content: center;\n`;\n\nexport default SidePanel;","enum DataType {\n  BAR = 50, MATRIX = 10, GRAPH = 10\n}\n\nexport default DataType;","import { SVG_WIDTH, SVG_HEIGHT } from \"../constants/Values\";\nimport { BaseType, select } from 'd3-selection';\nimport { barDefaultColor } from \"../constants/Color\";\nimport * as d3 from 'd3';\nimport Algorithms from \"../constants/Algorithms\";\nimport DataType from \"../constants/DataType\";\nimport { ConfigData } from \"../config\";\n\nexport interface Dataset {\n    dataType: DataType,\n    data: any\n    svgElements: BaseType[] \n}\n\nexport const generate = (n: number, config: ConfigData, svg: SVGElement): Dataset | undefined => {\n    const dataType = config.dataType;\n    if (n == 0) n = dataType;\n\n    select(svg).selectAll(\"*\").remove()   \n\n    switch (dataType) {\n        case DataType.BAR:\n            return createBars(n, svg, config);\n        case DataType.MATRIX:\n            return createMatrix(n, svg, config);\n    }\n\n}\n\n\nconst createMatrix = (n: number, svg: SVGElement, config: ConfigData): Dataset => {\n    const matrix = new Array(n);\n\n    let counter = 0;\n    for (let i = 0; i < n; i++) {\n        matrix[i] = [];\n\n        for (let j = 0; j < n; j++) {\n            matrix[i][j] = counter++;\n        }\n    }\n\n    const offsetHeight = ((SVG_HEIGHT / n));\n    const offsetWidth = ((SVG_WIDTH / n));\n    \n    let size = SVG_WIDTH / (n*n/2)\n    \n    counter = 0;\n\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            const circle = select(svg).append('circle')\n            circle.attr('id', 'element-' + counter++)\n                .attr('r', size)\n                .attr('cx', offsetWidth * j + (offsetWidth / 3))\n                .attr('cy', ((offsetHeight) * i) + (offsetHeight / 3))\n                .attr('fill', barDefaultColor)\n                .attr('col', i)\n                .attr('row', j);\n        }\n    }\n    \n    \n    const elements = select(svg).selectAll('*').nodes().filter(i => select(i).attr('id').includes('element'))\n\n    return {data: matrix, dataType: DataType.BAR, svgElements: elements}\n}\n\nconst createBars = (n: number, svg: SVGElement, config: ConfigData): Dataset => {\n    const dataset = createRandomArray(n, config);\n\n    const offset = ((SVG_WIDTH / n)) * 0.25;\n    select(svg).selectAll(\"*\").remove()    \n\n        select(svg)\n            .selectAll('rect')\n            .data(dataset)\n            .enter()\n            .append('rect')\n            .attr('id', (d, i) => `bar-${i.toString()}`)\n            .attr('width', (SVG_WIDTH / dataset.length) - offset)\n            .attr('height', (d) => d)\n            .attr('x', (d, i) => (i * ((SVG_WIDTH / dataset.length))))\n            .attr('y', (d) => SVG_HEIGHT - d)\n            .attr('fill', barDefaultColor);\n    \n    \n    const bars = select(svg).selectAll('rect').nodes().sort((a, b) => parseInt(select(a).attr('x')) - parseInt(select(b).attr('x')));\n\n    return {data: dataset, dataType: DataType.BAR, svgElements: bars}\n}\n\nfunction shuffle(array : number[]) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n}\n  \nconst createRandomArray = (n : number, config: ConfigData) => {\n\n    const data = [];\n    \n    for(let i = 0; i < n; i++) {\n        data.push(i);\n    }\n\n    let randomData = shuffle(data);\n\n    if (config.algo == Algorithms.BINARY_SEARCH) {\n        randomData = randomData.sort((a,b) => a - b)\n    }\n\n    const scale = d3.scaleLinear()\n        .domain([0, Math.max(...data)])\n        .range([10, SVG_HEIGHT]);\n\n    return randomData.map(x => scale(x)!);\n}\n","const barDefaultColor = '#6be6ff'\nconst barCompareColor = '#fff200';\nconst barAreaColor = '#3092a6'\nconst selectColor1 = '#CD672C';\nconst selectColor2 = '#ec8cff';\n\nconst sucessColor = '#048c09';\n\nconst barFocusColor = '#c90000';\n\nexport { barCompareColor, barDefaultColor, barFocusColor, barAreaColor, selectColor1, selectColor2, sucessColor}","export enum Input {\n  SELECT_1 = 'SELECT_1',\n  SELECT_2 = 'SELECT_2'\n}\n\nexport default Input;\n","import { select, selectAll, BaseType } from \"d3-selection\";\nimport * as d3 from 'd3';\nimport { barCompareColor, barAreaColor, barDefaultColor, barFocusColor } from \"../../../constants/Color\";\nimport { SVG_WIDTH } from \"../../../constants/Values\";\n\nexport default (svg: SVGSVGElement, setIsRunning: Function, duration: number, dataset: number[]) => {\n  let currDuration = 0;\n\n  setIsRunning(true);\n  const bars = select(svg).selectAll('rect').nodes().sort((a, b) => parseFloat(select(a).attr('x')) - parseFloat(select(b).attr('x')));\n  \n  function quickSort (arr : BaseType[], left: number, right: number) {\n    if (left >= right) {\n      return;\n    }\n    const mid = Math.floor((left + right) / 2);\n    const pivot = arr[mid];\n    const index = partition(arr, left, right, pivot);\n    quickSort(arr, left, index - 1);\n    quickSort(arr, index, right);\n  } \n\n  function partition(arr: BaseType[], left: number, right: number, pivot: BaseType): number {\n\n    for (let i = left; i <= right; i++) {\n      d3.timeout(() => select(arr[i]).attr('fill', barAreaColor), currDuration);\n    }\n\n    const pivotVal = parseFloat(select(pivot).attr('height'));\n    d3.timeout(() => select(pivot).attr('fill', barFocusColor), currDuration);\n    currDuration += duration;\n\n    while (left <= right) {\n      \n      while (getHeight(arr[left]) < pivotVal) {\n        left++;\n      }\n\n      while (getHeight(arr[right]) > pivotVal) {\n        right--;\n      }\n\n      const barLeft = select(arr[left]);\n      const barRight = select(arr[right]);\n\n      if (left <= right) {\n        if (arr[left] != arr[right]) {\n\n        \n          const tempId = select(arr[left]).attr('id');\n          select(arr[left]).attr('id', select(arr[right]).attr('id'));\n          select(arr[right]).attr('id', tempId);\n\n          const temp = arr[right];\n          arr[right] = arr[left];\n          arr[left] = temp;\n\n          const rightId = select(arr[right]).attr('id').substring(4);\n          const leftId = select(arr[left]).attr('id').substring(4);\n\n         \n          \n          d3.timeout(() => {\n            if(barRight.attr('fill') !== barFocusColor) barRight.attr('fill', barCompareColor);\n            if(barLeft.attr('fill') !== barFocusColor) barLeft.attr('fill', barCompareColor);\n          }, currDuration);\n\n          barLeft\n            .transition()\n            .delay(currDuration)\n            .duration(duration)\n            .attr('x', ((parseInt(rightId)) * ((SVG_WIDTH / bars.length))))\n            .on('end', function () {\n              if (barLeft.attr('fill') !== barFocusColor) select(this).attr('fill', barAreaColor);\n            });\n\n          barRight\n            .transition()\n            .delay(currDuration)\n            .duration(duration)\n            .attr('x', ((parseInt(leftId)) * ((SVG_WIDTH / bars.length))))\n            .on('end', function () {\n              if (barRight.attr('fill') !== barFocusColor) select(this).attr('fill', barAreaColor);\n            });\n\n          currDuration += duration;\n          \n      \n        }\n        left++;\n        right--;\n      }\n\n    }\n\n    d3.timeout(() => {\n      selectAll('rect')\n        .filter(function () {\n          return d3.select(this).attr(\"fill\") == barFocusColor || d3.select(this).attr(\"fill\") == barAreaColor;\n        }).attr('fill', barDefaultColor);\n    }, currDuration);\n\n    return left;\n  }\n\n  quickSort(bars, 0, bars.length - 1);\n  d3.timeout(() => setIsRunning(false), currDuration);\n}\n\nconst getHeight = (bar: BaseType) => parseFloat(select(bar).attr('height'));\n","import { barDefaultColor, sucessColor } from \"../constants/Color\";\n\nconst blink = (element: d3.Selection<any, unknown, null, undefined>) => {\n  const repeat = () => {\n    element\n      .transition()\n      .duration(100)\n      .attr('fill', sucessColor)\n      .on('end', function () {\n        element\n        .transition()\n        .duration(100)\n        .attr('fill', barDefaultColor)\n        .on('end', function () {\n          repeat();\n        });\n      });\n\n  }\n  \n  repeat();\n}\n\nexport { blink };","import Algorithms from \"./constants/Algorithms\";\nimport Input from \"./constants/Input\";\nimport DataType from \"./constants/DataType\";\nimport BubbleSort from \"./d3-helper/Animation/BubbleSort\";\nimport SelectionSort from \"./d3-helper/Animation/SelectionSort\";\nimport InsertionSort from \"./d3-helper/Animation/InsertionSort\";\nimport MergeSort from \"./d3-helper/Animation/MergeSort\";\nimport QuickSort from \"./d3-helper/Animation/QuickSort\";\nimport BinarySearch from \"./d3-helper/Animation/BinarySearch\";\nimport BFS from \"./d3-helper/Animation/BFS\";\nimport DFS from \"./d3-helper/Animation/DFS\";\n\nexport interface InputData {\n  inputType: Input,\n  error: string,\n  required: boolean\n}\n\nexport interface ConfigData {\n  algo: Algorithms,\n  name: string,\n  dataType: DataType,\n  inputs: InputData[],\n  onRun: Function\n}\n\ntype ConfigType = {\n  [key in Algorithms]: ConfigData\n;\n}\n\nconst Config: ConfigType = {\n  [Algorithms.BUBBLE_SORT]: {algo: Algorithms.BUBBLE_SORT, name: 'Bubble Sort', dataType: DataType.BAR, inputs: [], onRun: BubbleSort},\n  [Algorithms.SELECTION_SORT]: {algo: Algorithms.SELECTION_SORT, name: 'Selection Sort', dataType: DataType.BAR, inputs: [], onRun: SelectionSort},\n  [Algorithms.INSERTION_SORT]: {algo: Algorithms.INSERTION_SORT, name: 'Insertion Sort', dataType: DataType.BAR, inputs: [], onRun: InsertionSort},\n  [Algorithms.MERGE_SORT]: {algo: Algorithms.MERGE_SORT, name: 'Merge Sort', dataType: DataType.BAR, inputs: [], onRun: MergeSort},\n  [Algorithms.QUICK_SORT]: {algo: Algorithms.QUICK_SORT, name: 'Quick Sort', dataType: DataType.BAR, inputs: [], onRun: QuickSort},\n  [Algorithms.BINARY_SEARCH]: {\n    algo: Algorithms.BINARY_SEARCH, name: 'Binary Search', onRun: BinarySearch, dataType: DataType.BAR,\n    inputs: [{ inputType: Input.SELECT_1, error: 'Please select a bar to search for', required: true }]\n  },\n  [Algorithms.DEPTH_FIRST_SEARCH]: {\n    algo: Algorithms.DEPTH_FIRST_SEARCH, name: 'DFS (Depth First Search)', dataType: DataType.MATRIX,\n    inputs: [\n      { inputType: Input.SELECT_1, error: 'Please select a start node', required: true },\n      { inputType: Input.SELECT_2, error: 'Please select a end a node', required: true },\n    ], onRun: DFS},\n  [Algorithms.BREADTH_FIRST_SEARCH]: {\n    algo: Algorithms.BREADTH_FIRST_SEARCH, name: 'BFS (Bredth First Search)', dataType: DataType.MATRIX,\n    inputs: [\n      { inputType: Input.SELECT_1, error: 'Please select a start node', required: true },\n      { inputType: Input.SELECT_2, error: 'Please select a end a node', required: true },],\n    onRun: BFS\n  },\n}\n\nexport default Config;","import { select } from 'd3-selection';\nimport * as d3 from 'd3';\nimport { barCompareColor, barDefaultColor } from '../../../constants/Color';\nimport { SVG_WIDTH } from '../../../constants/Values';\nimport { Dataset } from '../../create';\n\nexport default (svg: SVGSVGElement,  setIsRunning : Function, duration: number, dataset: Dataset) : void => {\n    setIsRunning(true);\n    const bars = select(svg).selectAll('rect').nodes().sort((a, b) => parseInt(select(a).attr('x')) - parseInt(select(b).attr('x')));\n    let currDuration = 0;\n  \n    for(let j = 0; j < bars.length - 1; j++) {\n        let swaps = false;\n        for (let i = 0; i < bars.length - 1 - j; i++) {\n            \n            const first = select(bars[i]);\n            const second = select(bars[i+1]);\n            d3.timeout(() => first.attr('fill', barCompareColor), currDuration);\n            d3.timeout(() => second.attr('fill', barCompareColor), currDuration);\n            \n            currDuration += duration;\n\n            if (parseFloat(first.attr('height')) > parseFloat(second.attr('height'))) {\n                first\n                    .transition(\"swap1\")\n                    .duration(duration)\n                    .delay(currDuration)\n                    .attr('x', ((i+1) * SVG_WIDTH / bars.length))\n                    .on('end', function () {\n                        select(this).attr('fill', barDefaultColor);\n                    });\n\n                second\n                    .transition(\"swap2\")\n                    .duration(duration)\n                    .delay(currDuration)\n                    .attr('x', (i * SVG_WIDTH / bars.length))\n                    .on('end', function () {\n                        select(this).attr('fill', barDefaultColor)\n                    });\n\n                    swaps = true;\n                    const temp = bars[i];\n                    bars[i] = bars[i+1];\n                    bars[i+1] = temp;\n                    currDuration += duration;\n            } else {\n                d3.timeout(() => first.attr('fill',barDefaultColor), currDuration);\n                d3.timeout(() => second.attr('fill',barDefaultColor), currDuration);\n            }\n\n        }\n        if(!swaps) {\n            d3.timeout(() => setIsRunning(false), currDuration);\n            return;\n        }\n    }\n}","import { select } from 'd3-selection';\nimport * as d3 from 'd3';\nimport { barCompareColor, barDefaultColor, barFocusColor } from '../../../constants/Color';\nimport { SVG_WIDTH } from '../../../constants/Values';\n\nexport default (svg: SVGSVGElement,  setIsRunning : Function, duration: number, dataset: number[]) => {\n    setIsRunning(true);\n    const bars = select(svg).selectAll('rect').nodes().sort((a, b) => parseInt(select(a).attr('x')) - parseInt(select(b).attr('x')));\n    let currDuration = 0;\n  \n    for(let j = 0; j < bars.length - 1; j++) {\n        let min = Number.MAX_VALUE;\n        let minIndex = -1;\n        \n        d3.timeout(() => console.log(`starting`), currDuration);\n        for (let i = j; i < bars.length; i++) {\n            const curr = select(bars[i]);\n            const minBar = select(bars[minIndex]);\n            \n            d3.timeout(() => curr.attr('fill', barCompareColor), currDuration);\n            currDuration += duration;\n            const height = parseFloat(curr.attr('height'));\n            \n            if (height < min) {\n                minIndex = i;\n                min = height;\n                d3.timeout(() => curr.attr('fill', barFocusColor), currDuration);\n                d3.timeout(() => minBar.attr('fill', barDefaultColor), currDuration);\n                \n            } else {\n                d3.timeout(() => curr.attr('fill', barDefaultColor), currDuration);\n            }\n        }\n        \n        const first = select(bars[minIndex]);\n        const second = select(bars[j]);\n\n        first\n            .transition(\"swap2\")\n            .duration(duration)\n            .delay(currDuration)\n            .attr('x', ((j) * SVG_WIDTH / bars.length))\n            .on('end', function () {\n                select(this).attr('fill', barDefaultColor);\n            });\n\n        second\n            .transition(\"swap1\")\n            .duration(duration)\n            .delay(currDuration)\n            .attr('x', ((minIndex) * SVG_WIDTH / bars.length))\n            .on('end', function () {\n                select(this).attr('fill', barDefaultColor);\n            });\n            \n            currDuration += duration;\n\n            const temp = bars[minIndex];\n            bars[minIndex] = bars[j];\n            bars[j] = temp;\n    }\n\n    d3.timeout(() => setIsRunning(false), currDuration);\n}","import { select } from 'd3-selection';\nimport * as d3 from 'd3';\nimport { barCompareColor, barDefaultColor, barFocusColor } from '../../../constants/Color';\nimport { SVG_WIDTH } from '../../../constants/Values';\n\nexport default (svg: SVGSVGElement,  setIsRunning : Function, duration: number, dataset: number[]) => {\n    setIsRunning(true);\n    const bars = select(svg).selectAll('rect').nodes().sort((a, b) => parseInt(select(a).attr('x')) - parseInt(select(b).attr('x')));\n    let currDuration = 0;\n  \n    for(let j = 0; j < bars.length; j++) {\n        let currIndex = j;\n        const curr = select(bars[currIndex]);\n        const currHeight = parseFloat(curr.attr('height'));\n        d3.timeout(() => curr.attr('fill', barFocusColor), currDuration);\n        currDuration += duration;\n        for (let i = j-1; i >= 0; i--) {\n            \n            const target = select(bars[i]);\n            d3.timeout(() => target.attr('fill', barCompareColor), currDuration);\n            currDuration += duration;\n            const targetHeight = parseFloat(target.attr('height'));\n            \n            \n            if (currHeight < targetHeight) {\n                curr\n                    .transition(\"swap2\")\n                    .duration(duration)\n                    .delay(currDuration)\n                    .attr('x', ((i) * SVG_WIDTH / bars.length))\n\n    \n                target\n                    .transition(\"swap1\")\n                    .duration(duration)\n                    .delay(currDuration)\n                    .attr('x', ((currIndex) * SVG_WIDTH / bars.length))\n                    .on('end', function () {\n                        select(this).attr('fill', barDefaultColor);\n                    });\n                    currDuration += duration;\n                    const temp = bars[i];\n                    bars[i] = bars[currIndex];\n                    bars[currIndex] = temp;\n                    currIndex = i;\n                \n            } else {\n                d3.timeout(() => curr.attr('fill', barDefaultColor), currDuration);\n                d3.timeout(() => target.attr('fill', barDefaultColor), currDuration);\n                break;\n            }\n        }\n        \n        d3.timeout(() => curr.attr('fill', barDefaultColor), currDuration);\n        currDuration += duration;\n        \n    }\n\n    d3.timeout(() => setIsRunning(false), currDuration);\n}","import { select, BaseType } from \"d3-selection\";\nimport * as d3 from 'd3';\nimport { barCompareColor, barAreaColor, barDefaultColor } from \"../../../constants/Color\";\nimport { SVG_WIDTH } from \"../../../constants/Values\";\nexport default (svg: SVGSVGElement, setIsRunning: Function, duration: number, dataset: number[]) => {\n  let currDuration = 0;\n\n  setIsRunning(true);\n  const bars = select(svg).selectAll('rect').nodes().sort((a, b) => parseFloat(select(a).attr('x')) - parseFloat(select(b).attr('x')));\n  \n  function mergeSort (arr : BaseType[]) : BaseType[]{\n    if(arr.length === 1){\n      return arr;\n    }\n    let mid = Math.floor(arr.length / 2);\n  \n    const L = arr.slice(0, mid);\n    const R = arr.slice(mid, arr.length);\n  \n  \n    for (let i = 0; i < mid; i++) {\n      const curr = select(arr[i]);\n      d3.timeout(() => curr.attr('fill', barAreaColor), currDuration);\n    }\n  \n    for (let i = mid; i < arr.length; i++) {\n      const curr = select(arr[i]);\n      d3.timeout(() => curr.attr('fill', barAreaColor), currDuration);\n    }\n  \n    currDuration += (duration);\n  \n    for (let i = 0; i < mid; i++) {\n      const curr = select(arr[i]);\n      d3.timeout(() => curr.attr('fill', barDefaultColor), currDuration);\n    }\n  \n    for (let i = mid; i < arr.length; i++) {\n      const curr = select(arr[i]);\n      d3.timeout(() => curr.attr('fill', barDefaultColor), currDuration);\n    }\n  \n    currDuration += (duration);\n  \n    const left = mergeSort(L);\n    const right = mergeSort(R);\n  \n    let mergeArr = [];\n    let i = 0,j = 0;\n  \n  \n    const old = [...left, ...right];\n  \n    while (i < left.length && j < right.length) {\n      const leftH = parseFloat(select(left[i]).attr('height'));\n      const rightH = parseFloat(select(right[j]).attr('height'));\n  \n      if(leftH < rightH){\n        mergeArr.push(left[i++])\n    \n      }else {\n        mergeArr.push(right[j++])\n      }\n    }\n  \n    const result = mergeArr.concat(left.slice(i)).concat(right.slice(j));\n  \n    const changeMap = new Map();\n  \n    for (let z = 0; z < result.length; z++) {\n      const prev = select(old[z]);\n      const curr = select(result[z]);\n      const value = prev.attr('id') === curr.attr('id') ? curr.attr('id') : prev.attr('id');\n      changeMap.set(curr, value);\n      d3.timeout(() => curr.attr('fill', barCompareColor), currDuration);\n    }\n  \n    currDuration += (duration);\n    \n    Array.from(changeMap, ([k, v]) => {\n      const bar: d3.Selection<any, unknown, null, undefined> = k;\n      \n      bar.attr('id', v);\n      const barPos = v.substring(4);\n\n      bar\n          .transition()\n          .duration(duration)\n          .delay(currDuration)\n          .attr('x', ((parseInt(barPos)) * ((SVG_WIDTH / bars.length))))\n          .on('end', function () {\n            select(this).attr('fill', barDefaultColor);\n          });\n    });\n    currDuration += (duration);\n    return result;\n  } \n\n  \n  const result = mergeSort(bars);\n  d3.timeout(() => setIsRunning(false), currDuration);\n}","import { select } from 'd3-selection';\nimport * as d3 from 'd3';\nimport { barAreaColor, barCompareColor, barDefaultColor, barFocusColor, selectColor1, sucessColor } from '../../../constants/Color';\nimport { SVG_WIDTH } from '../../../constants/Values';\nimport Input from '../../../constants/Input';\nimport { blink } from '../../animation-helper';\n\n\n/*\n  ____  _                           _____                     _     \n |  _ \\(_)                         / ____|                   | |    \n | |_) |_ _ __   __ _ _ __ _   _  | (___   ___  __ _ _ __ ___| |__  \n |  _ <| | '_ \\ / _` | '__| | | |  \\___ \\ / _ \\/ _` | '__/ __| '_ \\ \n | |_) | | | | | (_| | |  | |_| |  ____) |  __/ (_| | | | (__| | | |\n |____/|_|_| |_|\\__,_|_|   \\__, | |_____/ \\___|\\__,_|_|  \\___|_| |_|\n                            __/ |                                   \n                           |___/                                    \n*/\nexport default (svg: SVGSVGElement,  setIsRunning : Function, duration: number, dataset: number[], data: Map<Input,any>) => {\n    setIsRunning(true);\n    const bars = select(svg).selectAll('rect').nodes().sort((a, b) => parseInt(select(a).attr('x')) - parseInt(select(b).attr('x')));\n    let currDuration = 0;\n\n    \n  const selected = data.get(Input.SELECT_1);\n  const selectedHeight = parseInt(selected.attr('height'));\n  \n  let left = 0;\n  let right = bars.length - 1;\n\n  while (left <= right) {\n    let mid = Math.floor((right + left) / 2);\n    let midBar = select(bars[mid]);\n    let midHeight = parseInt(midBar.attr('height'));\n\n    for (let j = left; j <= right; j++) {\n      let currIndex = j;\n      const curr = select(bars[currIndex]);\n      d3.timeout(() => {\n        curr.transition()\n        .ease(d3.easeLinear)\n        .duration(100)\n        .attr(\"y\",parseFloat(curr.attr(\"y\")) - 5)\n      }, currDuration);\n\n      if (curr.attr('id') == selected.attr('id')) continue;\n      d3.timeout(() => {\n        curr.attr('fill', barAreaColor);\n      }, currDuration);\n    }\n\n    currDuration += 500;\n\n    d3.timeout(() => midBar.attr('fill', barFocusColor), currDuration);\n    \n    currDuration += 500;\n    let prevLeft = left;\n    let prevRight = right;\n\n    if (selectedHeight < midHeight) {\n      right = mid - 1;\n    } else if (selectedHeight > midHeight) {\n      left = mid + 1;\n    } else {\n      d3.timeout(() => {\n        select(svg).selectAll('rect').attr('fill', barDefaultColor);\n        \n        for (let j = 0; j < bars.length; j++) {\n          if (j >= prevLeft && j <= prevRight) {\n            let currIndex = j;\n            const curr = select(bars[currIndex]);\n            curr.transition()\n              .ease(d3.easeLinear)\n              .duration(100)\n              .attr(\"y\", parseFloat(curr.attr(\"y\")) + 5)\n          }\n        }\n    }, currDuration)\n      \n      break;\n    }\n\n    \n    d3.timeout(() => {\n      select(svg).selectAll('rect').attr('fill', barDefaultColor);\n      \n      for (let j = 0; j < bars.length; j++) {\n        if (j >= prevLeft && j <= prevRight) {\n          let currIndex = j;\n          const curr = select(bars[currIndex]);\n          curr.transition()\n            .ease(d3.easeLinear)\n            .duration(100)\n            .attr(\"y\", parseFloat(curr.attr(\"y\")) + 5)\n        }\n      }\n      currDuration += 100;\n    }, currDuration);\n\n    d3.timeout(() => selected.attr('fill', selectColor1), currDuration);\n    currDuration += 500;\n  }\n\n    d3.timeout(() => setIsRunning(false), currDuration);\n}","import { BaseType, select } from 'd3-selection';\nimport * as d3 from 'd3';\nimport { barAreaColor, barCompareColor, barDefaultColor, barFocusColor, sucessColor } from '../../../constants/Color';\nimport { SVG_WIDTH } from '../../../constants/Values';\nimport Input from '../../../constants/Input';\nimport { Dataset } from '../../create';\nimport { blink } from '../../animation-helper';\n\n\n/*\n  _____  ______ _____ \n |  __ \\|  ____/ ____|\n | |  | | |__ | (___  \n | |  | |  __| \\___ \\ \n | |__| | |    ____) |\n |_____/|_|   |_____/ \n                                    \n*/\nexport default (svg: SVGSVGElement, setIsRunning: Function, duration: number, dataset: Dataset, data: Map<Input, any>) => {\n  setIsRunning(true);\n  let currDuration = 0;\n\n  const elements = select(svg).selectAll('*').nodes().filter(i => select(i).attr('id').includes('element'))\n  \n  const size = Math.sqrt(elements.length);\n\n  const matrix: any = []\n\n  let counter = 0;\n  let visited: any = [];\n\n  for (let i = 0; i < size; i++) {\n    matrix[i] = [];\n    visited[i] = []\n\n    for (let j = 0; j < size; j++) {\n      matrix[i][j] = elements[counter];\n  \n      \n      \n      visited[i][j] = false;\n      counter++;\n    }\n  }\n    \n  const target = data.get(Input.SELECT_2);\n  const targetCol = parseInt(target.attr('col'));\n  const targetRow = parseInt(target.attr('row'));\n  const r = parseFloat(target.attr('r'));\n\n  let found = false;\n\n  const dfs = (node: d3.Selection<any, unknown, null, undefined>) => {\n\n    const col = parseInt(node.attr('col'));\n    const row = parseInt(node.attr('row'));\n\n    if (visited[col][row]) return;\n\n    visited[col][row] = true;\n\n    currDuration += 30;\n\n    \n\n    if (col == targetCol && row == targetRow) {\n      d3.timeout(() => blink(node), currDuration);\n      found = true;\n      return;\n    }\n\n    if (found) return;\n\n    d3.timeout(() => {\n      node.attr('fill', barCompareColor);\n      const pulse = node.clone(true)\n          .attr('fill', 'transparent')\n          .attr('stroke-width', '1')\n          .attr('stroke', barDefaultColor)\n          .attr('r', r);\n\n        pulse\n          .transition()\n          .duration(750)\n          .attr('r', r*3)\n          .style('opacity', 0)\n          .on('end', function () {\n            pulse.remove();\n          });\n    }, currDuration);\n\n    if (col > 0) dfs(select(matrix[col - 1][row]))\n    if (row < size - 1) dfs(select(matrix[col][row + 1]))\n    if (col < size - 1) dfs(select(matrix[col + 1][row]))\n    if (row > 0) dfs(select(matrix[col][row - 1]))\n    \n\n  }\n\n  dfs(data.get(Input.SELECT_1))\n\n  // const queue: d3.Selection<any, unknown, null, undefined>[] = [data.get(Input.SELECT_1)];\n  \n  \n  // let x = 0;\n  // let found = false;\n\n  // while (queue.length != 0) {\n    \n  //   const n = queue.length;\n\n  //   for (let i = 0; i < n; i++) {\n  //     const node = queue.shift();\n  //     if (node == undefined) continue;\n\n  //     const col = parseInt(node.attr('col'));\n  //     const row = parseInt(node.attr('row'));\n  //     if (visited[col][row]) continue;\n\n  //     currDuration += 30;\n\n  //     visited[col][row] = true;\n\n  //     d3.timeout(() => {\n  //       node.attr('fill', barCompareColor);\n\n  //       const pulse = node.clone(true)\n  //         .attr('fill', 'transparent')\n  //         .attr('stroke-width', '1')\n  //         .attr('stroke', barDefaultColor)\n  //         .attr('r', r);\n\n  //       pulse\n  //         .transition()\n  //         .duration(750)\n  //         .attr('r', r*3)\n  //         .style('opacity', 0)\n  //         .on('end', function () {\n  //           pulse.remove();\n  //         });\n\n  //   }, currDuration);\n\n        \n  //     if (col == targetCol && row == targetRow) {\n        \n\n\n  //       d3.timeout(() => blink(node), currDuration);\n  //       found = true;\n  //       break;\n  //     }\n\n  //     if (col > 0) queue.push(select(matrix[col - 1][row]))\n  //     if (row < size - 1) queue.push(select(matrix[col][row + 1]))\n  //     if (col < size - 1) queue.push(select(matrix[col + 1][row]))\n  //     if (row > 0) queue.push(select(matrix[col][row - 1]))\n\n      \n  //   }\n\n  //   if (found) break;\n \n  //   currDuration += 200;\n  // }\n\n  \n\n  d3.timeout(() => setIsRunning(false), currDuration);\n}","import { BaseType, select } from 'd3-selection';\nimport * as d3 from 'd3';\nimport { barAreaColor, barCompareColor, barDefaultColor, barFocusColor, sucessColor } from '../../../constants/Color';\nimport { SVG_WIDTH } from '../../../constants/Values';\nimport Input from '../../../constants/Input';\nimport { Dataset } from '../../create';\nimport { blink } from '../../animation-helper';\n\n\n/*\n  ____  ______ _____ \n |  _ \\|  ____/ ____|\n | |_) | |__ | (___  \n |  _ <|  __| \\___ \\ \n | |_) | |    ____) |\n |____/|_|   |_____/                                 \n*/\nexport default (svg: SVGSVGElement, setIsRunning: Function, duration: number, dataset: Dataset, data: Map<Input, any>) => {\n  setIsRunning(true);\n  let currDuration = 0;\n\n  const elements = select(svg).selectAll('*').nodes().filter(i => select(i).attr('id').includes('element'))\n  \n  const size = Math.sqrt(elements.length);\n\n  const matrix: any = []\n\n  let counter = 0;\n  let visited: any = [];\n\n  for (let i = 0; i < size; i++) {\n    matrix[i] = [];\n    visited[i] = []\n\n    for (let j = 0; j < size; j++) {\n      matrix[i][j] = elements[counter];\n  \n      \n      \n      visited[i][j] = false;\n      counter++;\n    }\n  }\n    \n  const target = data.get(Input.SELECT_2);\n  const targetCol = parseInt(target.attr('col'));\n  const targetRow = parseInt(target.attr('row'));\n  const r = parseFloat(target.attr('r'));\n\n  const queue: d3.Selection<any, unknown, null, undefined>[] = [data.get(Input.SELECT_1)];\n  \n  \n  let x = 0;\n  let found = false;\n\n  while (queue.length != 0) {\n    \n    const n = queue.length;\n\n    for (let i = 0; i < n; i++) {\n      const node = queue.shift();\n      if (node == undefined) continue;\n\n      const col = parseInt(node.attr('col'));\n      const row = parseInt(node.attr('row'));\n      if (visited[col][row]) continue;\n\n      currDuration += 30;\n\n      visited[col][row] = true;\n\n      d3.timeout(() => {\n        node.attr('fill', barCompareColor);\n\n        const pulse = node.clone(true)\n          .attr('fill', 'transparent')\n          .attr('stroke-width', '1')\n          .attr('stroke', barDefaultColor)\n          .attr('r', r);\n\n        pulse\n          .transition()\n          .duration(750)\n          .attr('r', r*3)\n          .style('opacity', 0)\n          .on('end', function () {\n            pulse.remove();\n          });\n\n    }, currDuration);\n\n        \n      if (col == targetCol && row == targetRow) {\n        \n\n\n        d3.timeout(() => blink(node), currDuration);\n        found = true;\n        break;\n      }\n\n      if (col > 0) queue.push(select(matrix[col - 1][row]))\n      if (row < size - 1) queue.push(select(matrix[col][row + 1]))\n      if (col < size - 1) queue.push(select(matrix[col + 1][row]))\n      if (row > 0) queue.push(select(matrix[col][row - 1]))\n\n      \n    }\n\n    if (found) break;\n \n    currDuration += 200;\n  }\n\n  \n\n  d3.timeout(() => setIsRunning(false), currDuration);\n}","import React, { useRef, useEffect, useState } from 'react';\nimport { select } from 'd3-selection';\nimport styled from 'styled-components';\nimport RunButton from '../../Shared/RunButton';\nimport NumberInput from '../../Shared/NumberInput';\nimport RefreshDataButton from '../../Shared/RefreshDataButton';\nimport SpeedSlider from '../../Shared/SpeedSlider';\nimport RunningAnimation from '../../Shared/RunningAnimation';\nimport Svg from '../../Shared/Svg';\nimport * as d3 from 'd3';\nimport Title from '../../Shared/Title';\nimport MainContent from '../../Shared/MainContent';\nimport SidePanel from '../../Shared/SidePanel';\nimport { Dataset, generate } from '../../../d3-helper/create';\nimport Input from '../../../constants/Input';\nimport Algorithms from '../../../constants/Algorithms';\nimport { barDefaultColor, barFocusColor, selectColor1, selectColor2 } from '../../../constants/Color';\nimport Config, { ConfigData, InputData } from '../../../config';\n\nconst Container = styled.div`\n    margin: 30px;\n`;\n\ntype SortingProps = {\n    algo: Algorithms,\n    onRun: Function\n}\n\nconst Sorting: React.FC<SortingProps> = ({ algo, onRun }) => {\n    \n    let dataset: Dataset | undefined;\n\n    const svgRef = useRef<SVGSVGElement>(null);\n    const config = Config[algo];\n    \n    const [speedPercent, setSpeedPercent] = useState(50);\n    const [isRunning, setIsRunning] = useState(false);\n    const [data, setData] = useState(new Map<Input, any>());\n    const [canExecute, setCanExecute] = useState(false);\n\n    const refresh = () => {\n        onRefresh();\n        applyInputs(config, dataset!, isRunning, data, setData);\n    }\n\n    function onRefresh() {\n        data.clear()\n        const svg = svgRef.current;\n        let n = 0;\n        if (isRunning) setIsRunning(false);\n        if (inputFieldRef.current != null) {\n            const textValue = select(inputFieldRef.current).property('value');\n            n = textValue === '' ? 0 : parseInt(textValue);\n        }\n        dataset = generate(n, config, svg!);\n    }\n\n    useEffect(() => {\n        refresh();\n    }, [svgRef]);\n\n    \n    var logScale = d3.scalePow()\n    .exponent(7)\n    .domain([1, 100])\n    .range([0.5, 2000]);\n\n    const title = algo;\n\n    const duration = logScale(101 - speedPercent);\n\n    const inputFieldRef = useRef(null);\n\n    useEffect(() => {\n        const execute = checkInputs(config, data);\n        setCanExecute(execute)\n    }, [data]);\n\n    useEffect(() => {\n        refresh();\n    }, [algo]);\n\n    const sliderOnChange = function(event : React.ChangeEvent<HTMLInputElement>) {\n        setSpeedPercent(parseInt(event.target.value));\n    };\n \n\n    return (\n        <Container>\n            <Title>{title}</Title>\n            <MainContent>\n                <Svg ref={svgRef}></Svg>\n                <SidePanel>\n                    { \n                        isRunning \n                        ? <RunningAnimation></RunningAnimation>\n                        : \n                            <>\n                                <NumberInput label=\"Number of elements: \" ref={inputFieldRef} placeholder={\"Default: \" + config.dataType} />\n                                <RefreshDataButton onClick={e => { refresh();}}>Refresh Data</RefreshDataButton>\n                                <SpeedSlider value={speedPercent} type=\"range\" min={1} max={100} defaultValue={speedPercent} onChange={sliderOnChange}/>\n                                {canExecute && <RunButton onClick={() => onRun(svgRef.current, setIsRunning, duration, dataset, data)}>Run</RunButton>}\n                            </>\n                    }\n                </SidePanel>\n            </MainContent>\n        </Container>\n    )\n};\n\nconst applyInputs = (config: ConfigData, dataset: Dataset, isRunning: boolean, data: Map<Input, any>, setData: Function) => {\n    const inputs = config.inputs.map(i => i.inputType);\n\n        if (inputs.includes(Input.SELECT_1)) {\n            if (!data.has(Input.SELECT_1)) data.set(Input.SELECT_1, null);\n            if (inputs.includes(Input.SELECT_2)) {\n                if (!data.has(Input.SELECT_2)) data.set(Input.SELECT_2, null);\n            }\n            const elements = dataset.svgElements;\n            for (let i = 0; i < elements.length; i++) {\n                const bar = select(elements[i]);\n                bar.on('mouseover', () => {\n                    if (bar == data.get(Input.SELECT_1)) return;\n                    if (bar == data.get(Input.SELECT_2)) return;\n                    bar.attr('fill', barFocusColor)\n                    bar.style(\"cursor\", \"pointer\");\n                    \n                }).on('mouseout', () => {\n                    \n                    if (bar == data.get(Input.SELECT_1)) return;\n                    if (bar == data.get(Input.SELECT_2)) return;\n\n                    bar.attr('fill', barDefaultColor)\n                    bar.style(\"cursor\", \"default\");\n                    \n\n                }).on('click', () => {\n                    //select(svg).selectAll('rect').attr('fill', barDefaultColor)\n                    if (!isRunning) {\n                        if (!data.get(Input.SELECT_1)) {\n                            bar.attr('fill', selectColor1);\n                            data.set(Input.SELECT_1,bar);\n                            setData(new Map(data));\n                        } else if (inputs.includes(Input.SELECT_2) && data.get(Input.SELECT_1) && !data.get(Input.SELECT_2)) {\n                            bar.attr('fill', selectColor2);\n                            data.set(Input.SELECT_2,bar);\n                            setData(new Map(data));\n                        }\n                    }\n                })\n            }\n        }\n    \n\n    setData(new Map(data))\n    \n}\n\nconst checkInputs = (config: ConfigData, data: Map<Input, any>) => {\n    \n    const inputs = config.inputs.map(i => i.inputType);\n\n    if (inputs.includes(Input.SELECT_1)) {\n        if ((data.has(Input.SELECT_1) && data.get(Input.SELECT_1) == null)) return false;\n    }\n\n    if (inputs.includes(Input.SELECT_2)) {\n        if ((data.has(Input.SELECT_1) && data.get(Input.SELECT_1) == null)) return false;\n        if ((data.has(Input.SELECT_2) && data.get(Input.SELECT_2) == null)) return false;\n    }\n\n    return true;\n}\n\nexport default Sorting;\n\n","import React, { useState } from 'react';\nimport NavBar from '../NavBar';\nimport Algorithms from '../../constants/Algorithms';\nimport Sorting from '../Category/Sorting';\nimport Config from '../../config';\n\n\n\nconst App : React.FC = () => {\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<Algorithms>(Algorithms.DEPTH_FIRST_SEARCH);\n  const config = Config[selectedAlgorithm];\n\n  const run = config.onRun;\n  return (\n    <>\n      <NavBar setAlgo={setSelectedAlgorithm}/>\n      <Sorting algo={selectedAlgorithm} onRun={run} />,\n    </>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createRoot } from 'react-dom/client';\n\n\nimport 'typeface-roboto'\nimport './index.css';\nimport App from './components/App/';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route, Routes, createBrowserRouter, Link, RouterProvider, createHashRouter, HashRouter } from \"react-router-dom\";\nimport styled from 'styled-components';\n\n\nconst root = createRoot(document.getElementById(\"root\") as HTMLElement);\n\nroot.render(\n  <React.StrictMode>\n     <HashRouter>\n      <Routes>\n        <Route path={'/*'} element={<NotFoundContainer />} />\n        <Route path={'/algo'} element={<App />} />\n       </Routes>\n     </HashRouter>\n  </React.StrictMode>\n);\n\nconst NotFound = styled.span`\n    color: white;\n    display:block;\n    padding: 10px;\n    font-weight: bold;\n    margin-left:30px;\n    letter-spacing: 1px;\n    text-transform: uppercase;\n`;\n\nfunction NotFoundContainer() {\n  return (\n    <div>\n      <NotFound>Not Found</NotFound>\n    </div>\n  );\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}